Day Objectives:
----------------
	-URL creation
	    - path(p1,p2,p3)
	    - path('urlname/',views.functionname,name of the url)
package:
--------
	- it is collection of modules
module:
-------
	- it is a collection of .py files

	def fun name(request):
		-http request(hypertext transfer protocol)
		- http response
			- heading tags(h1 to h6)
		- css(cascading style sheets)
			- syntax:
				property:value;


<h2 style=background-color:blue;color:red;font-size:70px;font-style:italic


return HttpResponse("<h2 style=background-color:
blue;color:red;font-size:70px;
font-style:italic>Hai..guys..</h2>")

Dynamic Url Mapping:
--------------------
	- static url
	   path('urlname/',fn name,
name of the url)
	- dynamic url
	   path('urlname/<datatype:variable>/',
fn name,name of the url)


ex:
	localhost:8000/dynamic/4343653
         my roll number is:4343653

	-  .format()

EX: a='python'
    print("this is {} session.format(a))
	 this is python session


return HttpResponse("<h2 style=background-color:
blue;color:red;font-size:70px;font-style:italic>
My Roll number is:{}</h2>".format(id))


return HttpResponse("My rollnumber is :{},
My name is:{}".format(id,name))



Django Templates:
-----------------
	- template:store .html files
	  ---------
		- render(p1,p2,p3)
		- render(request,'html file location',dictionary)
	
html structure:
----------------
	<html>
	<Doc type>
	<head>
		<title></title>
	</head>
	<body>
	</body>
	</html>
template creation:
------------------
	- MyApp->newfolder->templates
	- templates->newfolder->MyApp

html tags:
----------
	- <input>
	- <form>
	- <br>
	- <link>
	- <script>
	- <p>
	- <button>
	- <img>
	- <a href=""
	- <lable>
	- <table>
		<thead>,<tbody>,<th>,<tr>,<td>
	- <marquee>
	- <center>
	- <style>

table printing:
---------------
	- rows,columns
path('table/',views.table,name='table')
def table(request):
	return render(request,'Myapp/table.html')
css::
      inline
      internal
      external
urls: path('inline/',views.inline,name='inline')
views: def inline(request):
	return render(request,'Myapp/inline.html')





Day Objectives:
---------------
	- external Css
		- registration form
			- username
			- email id(username@gmail.com)
			- mobile number
			- password
			- confirm password
			      register
		
static file handling:
---------------------
	.css,.js,imges
static files creation:
---------------------
	- MyApp->newfolder->static->css,js,images

DTL(Django template language):
------------------------------
	- conditional statements:	
		if,elif,else
		{% if condition %}

                {% endif %}

		{% if  ...%}
		{% elif...%}
		.
		.
		{% else%}
		{% endif%}

	- control statements:
		for,while 
		{% for i in varianame %}
			## block of code
		{% endfor%}

		{% while(condition)%}
			## statements
		{% endwhile %}

js->alert messages->alert("message")
image
	
- BootStrap:  
------------ 
	- for responsive web design 
	- bootstrap classes->design
	   <button>--->padding:78px
	- bootstrap:
		<div class="container">

		</div>
		
online bootstrap:
-----------------
	- css,js--->copied from online

offline bootstrap:
-----------------
	- static->css->bootstrap.min.css
		->js->bootstrap.min.js

Day Objectives:
--------------
	- Django admin
		- admin
		- To login admin create superuser account
                                    - - python manage.py createsuperuser
	(if any operational error) - python manage.py migrate
		     
                                       user name:
                                        email:
                                        password:
                                        confirm password:


Model Creation:
--------------
	model:db connections means database creation
	- by using classes we can create db
		class classname-->db name
                                     db fields-->(data type(int,char,var char-length also we will mention--))
	data base:
	----------
		- collection of data 
		- https://sqlitebrowser.org/dl/
			Student
			    - name
			    - rollnum
			    - age
			    - mobile
			    - email 
			    - address
	-Django InputFields:
		- CharField
		- IntegerField
		- EmailField
		- TextField
	                 - ImageField

class Student(models.Model):
	name=models.CharField(max_length=20)
	rollnum=models.CharField(max_length=30)
	age=models.IntegerField()
	mobile=models.IntegerField()
	email=models.EmailField(max_length=30)
	address=models.TextField(max_length=30)

	def __str__(self):
		return self.name+' '+self.email

	- After creation of model we have to do two 
operations:

	- makemigrations(it will generate one interface 
file for db)
		"python manage.py makemigrations"

	- migrate(it converts interface file to table)

		" python manage.py migrate"


oops(class,object,constructor):

	
	def __str__(self):--->default
		### statements
	
	def __str__(self,a,b)-->parametrized
		## statements	


CRUD Operations:
----------------
C-create a db
R-retrieve a db
U-update a db
D-delete a db
    3ways::
    ----------
          - ORM Queries
         -  Html pages
         - Forms
       

ORM(Object relational Mapping):
-------------------------------
             - orm(object relational mapping)
                     - using objects we can perfome crud operations
C-create a db:
--------------
	- ORM Queries
	    - python shell
	         - python manage.py shell 
                           - from Myapp.models import Student
For insert database:
----------------------
 -1. -save():
      --------
                  obj=modelname(field='value',field='value'....fn='vn')
	obj.save()
                  obj

ex:obj=Student(name='siri',rollnum='130767786',age='12',
mobile='98798789778',email='siri@gmail.com',
address='srikakulam')

obj.save()
obj

-2.- modelname.objects.create(field='value'..........)
ex: Student.objects.create(name='',rollnum='',age='',
mobile='',email='',address='')

R-retrieve a db:
----------------
	- if you want retrieve entire data from db
		ob=modelname.objects.all()
		ob
	- if you want retrieve only columns data
		for i in ob:
			print(i.name)

	- if you want to retrieve only first record
		modelname.objects.first()
	
	- if you want to retrieve only last record
		modelname.objects.last()
                  - if you return in list format
                                ob=Student.objects.values_list()
                                ob

	- slicing:  [start range:end range+1:steps]
	 ----------
		- modelname.objects.all()[:4]
		- modelname.objects.all()[::-1]
		- modelname.objects.all()[::2]

	-  if you want to retrieve specific record
		-get(id=number)---unique records
		- data=modelname.objects.get(id=2)
		  data
	- if you want to retrieve multiple records data
		- filter(fieldname=value)-->duplicates data also print here
		- data=modelname.objects.filter(age='23')
                                      data



U-update a db:
--------------
	- if you want to update specific record
		- d=modelname.objects.get(id=2)
		- d
		- d.age=30
		- d.save()
		
	- if you want to update specific column for all
user
		- obj=modelname.objects.all().update(age=20)
		  obj
                 - obj=modelname.objects.filter(address='kkd')
                   obj



D-delete a db:
-------------
	- if you want delete specific record

		-obj= modelname.objects.get(id=3)
		 obj
		 obj.delete()
                 
                - if you want to delete all records
                               info=modelname.objects.all().delete()
                               info


CRUD(HTML pages):
-----------------
	url->views->template
	models->views
	template->views
	views->template,model
requirements:
-------------
	-html page(url,view)
		- student(name,roll,age,mbl,email,address)
	
        - create url::path('register/',views.register,name='register')
        - create fn::def register(request):
                                 return render(request,'Myapp/register.html')


<div class="form-group">
	<label for="name">Name:</label>
                  <input type="text" name="name" placeholder="Enter                     your name" class="form-control" id="name">
</div>

<div class="form-group">
	<input type="submit" value="Register" class="form-control btn btn-outline-success btn-md-mt-4">
</div>





register.html::
--------------------
{% load static %}
<!DOCTYPE html>
<html>
<head>
	<title>Register page</title>
	<link rel="stylesheet" type="text/css" href="{% static 'css/bootstrap.min.css' %}">
	<script type="text/javascript" src="{% static 'js/bootstrap.min.js' %}"></script>
</head>
<body>
	<div class="container card card-body bg-info col-md-6 mt-3">
		<h2 class="alert alert-info text-center">Registration page</h2>
		<form method="POST">
			{% csrf_token %}
			<div class="form-group">
				<label for="name">Name:</label>
				<input type="text" name="name" placeholder="Enter your name" class="form-control" id="name">
			</div>
			<div class="form-group">
				<label for="name">Roll number:</label>
				<input type="text" name="rollnum" placeholder="Enter your rollnumber" class="form-control" id="rnum">
			</div>
			<div class="form-group">
				<label for="name">Age:</label>
				<input type="number" name="age" placeholder="Enter your age" class="form-control" id="Age">
			</div>
			<div class="form-group">
				<label for="name">Mobile:</label>
				<input type="number" name="mobile" placeholder="Enter your mobile number" class="form-control" id="mobile">
			</div>
			<div class="form-group">
				<label for="name">Email:</label>
				<input type="email" name="email" placeholder="Enter your email" class="form-control" id="email">
			</div>
			<div class="form-group">
				<label for="name">Address:</label>
				<input type="text" name="addr" placeholder="Enter your address" class="form-control" id="addr">
			</div>
			<div class="form-group">
				<input type="submit" value="Register" class="form-control btn btn-outline-success btn-md-mt-4">
			</div>
		</form>
		
	</div>
</body>
</html>



HTTP Request methods:
--------------------
		- GET
		- POST
                                          - csrf_token-(to secure data)
                                    - urls-views-templets
                                    - templets-views
                                         templets- method='POST'
                                                       -{% csrf_token %}
                                          views-
                                       -------------
                                      def register1(request):
	if request.method=="POST":
		na=request.POST['name']
		num=request.POST['rollnum']
		age=request.POST['age']
		mob=request.POST['mobile']
		em=request.POST['email']
		addr=request.POST['addr']
		Student.objects.create(name=na,rollnum=num,age=age,mobile=mob,email=em,address=addr)
		return HttpResponse("your data is submitted successfully")
		#return redirect('/details')
	return render(request,'eee/register1.html')



	


Day Objectives:
---------------
	- CRUD(Html)
	 -------------
		- Retrieve
			-modelname.objects.all()
			- render(req,filelocation,dic)
			-dic:views->data->templates
			- DTL->printing->{{}}
		- Update
			- obj=modelname.objects.get(id=n)
			  obj
			  obj.age=20
			  obj.save()
			  
			- http://localhost:8000/update/2/
			- template->method="post",token
			- views-> if request.method=="post":
							
		- Delete
			- obj=modelname.objects.get(id=n)
			  obj
				Are you sure to delete data record
					delete   cancel
			  obj.delete()	
		


               https://github.com/srikanya659qwe/Giet-Django







